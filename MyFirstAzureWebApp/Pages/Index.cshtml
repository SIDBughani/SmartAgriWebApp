@page   
@model IndexModel
@{
    ViewData["Title"] = "Smart Agriculture Monitoring System";
}
<style>
    body {
        background: linear-gradient(to bottom, #7ee3cd, rgb(64, 214, 117), #83a8ed);
        font-family: "Roboto", sans-serif;

}

    .container {
        max-width: 1500px;
        margin: 0 auto;
        padding: 20px 20px;
        text-align: center;
    }
    .header {
        margin-bottom: 10px;
    }
    h1 {
        font-size: 3rem;
        margin-bottom: 10px;
        color: #4B4B4B;
        font-weight: bold;
    }
    p {
        font-size: 1.2rem;
        margin-bottom: 60px;
        color: black;
    }
    .footer {
        margin-top: 60px; /* add margin to top */
        padding: 10px;
        text-align: center;
        font-size: 15px;
        color: black;
    }
    .sensor {
        border: 1px solid #D3D3D3;
        padding: 20px;
        background-color: #FFFFFF;
        margin-top: 50px; /* add margin to top */
    }
    h2 {
        font-size: 2rem;
        margin-bottom: 20px;
        color: #4B4B4B;
        font-weight: bold;
    }
    .sensor-table {
        margin-top: 20px;
        width: 100%;
        border-collapse: collapse;
    }
    .sensor-table th,
    .sensor-table td {
        padding: 10px;
        border: 1px solid #D3D3D3;
        text-align: left;
        font-size: 1.2rem;
        color: #4B4B4B;
    }
    .sensor-table th {
        background-color: #F5F5F5;
        font-weight: bold;
    }
    .sensor-table td {
        white-space: pre-wrap;
    }


</style>
<div class="container">
    <header>
        <h1>Smart Agriculture Monitoring System</h1>
        <p>Welcome to the Smart Agriculture Monitoring System! Our state-of-the-art system harnesses the power of a sophisticated network of advanced sensors to deliver unparalleled real-time monitoring of critical environmental parameters. These include soil moisture, temperature, humidity, light, nutrient, and rainfall levels. Through continuous monitoring of these parameters, farmers and growers are empowered to make informed decisions that drive crop growth, minimize waste, and maximize yields. Our cloud-based system offers a secure and reliable data storage solution, which provides authorized users with easy access to their critical data. This means that farmers and growers can monitor environmental conditions and receive timely alerts in the event of any deviations, thereby enabling them to take corrective action and ensure optimal crop health and yield. The Smart Agriculture Monitoring System also leverages sophisticated data analytics to provide valuable insights into long-term trends, enabling farmers and growers to make data-driven decisions and continuously improve their operations. Our cutting-edge technology and unparalleled expertise provide an unmatched level of precision and accuracy, allowing farmers and growers to remain at the forefront of sustainable and efficient agriculture.</p>
    </header>
    
    <main>
        <section class="sensor">
        <h2>Latest Sensor Values</h2>
        <canvas id="sensor-chart"></canvas>
        </section>
    </main>


<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js"></script> @* Import Chart.js library for my scatter chart *@

<script>
// Get the canvas element
var canvas = document.getElementById('sensor-chart');

// Get the context of the canvas element
var ctx = canvas.getContext('2d');

// Set the chart options
var options = {
    scales: {
        x: {
            title: {
                display: true,
                text: 'SensorData Id',
                font: {
                    size: 20,
                    weight: 'bold',
                    color: 'black'
                },
            }
        },
        y: {
            title: {
                display: true,
                text: 'Value',
                font: {
                    size: 20,
                    weight: 'bold',
                    color: 'black'
                },
            },
            ticks: {
                beginAtZero: true,
                }
            }
        }
    };

// Create the chart with the initial data
var chart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: [],
        datasets: [{
            label: 'Latest Sensor Values',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            data: []
        }]
    },
    options: options
});

// Retrieve the latest sensor values and update the chart every 5 seconds
setInterval(function() {
fetch('https://smartagrifunctionapp.azurewebsites.net/api/SensorData/?')
.then(response => response.json())
.then(function(data) {

var latestData = data.map(function(item) {
    return {
        Id: item.id.slice(0,8),
        Temperature: item.Temperature,
        SoilMoisture: item.SoilMoisture,
        Humidity: item.Humidity,
        Light: item.Light,
        Rainfall: item.Rainfall,
        Nutrients: item.Nutrients
        }
    });
    
    var labels = [];
    
    var temperatureValues = [];
    var soilmoistureValues = [];
    var humidityValues = [];
    var lightValues = [];
    var rainfallValues = [];
    var nutrientsValues = [];
    
    latestData.forEach(function(item) {
        labels.push(item.Id);
        temperatureValues.push(item.Temperature);
        soilmoistureValues.push(item.SoilMoisture);
        humidityValues.push(item.Humidity);
        lightValues.push(item.Light);
        rainfallValues.push(item.Rainfall);
        nutrientsValues.push(item.Nutrients);
        });
        
    // Reset the chart data
        chart.data.labels.splice(0, chart.data.labels.length);
        chart.data.labels.push(...labels);
        
        chart.data.labels = labels;
        chart.data.datasets = [];
        chart.data.datasets.push({
            label: 'Temperature',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 2,
            data: temperatureValues
            });
            
        chart.data.datasets.push({
            label: 'Soil Moisture',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2,
            data: soilmoistureValues
            });
        
        chart.data.datasets.push({
            label: 'Humidity',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 2,
            data: humidityValues
            });
        
        chart.data.datasets.push({
            label: 'Light',
            backgroundColor: 'rgba(255, 206, 86, 0.2)',
            borderColor: 'rgba(255, 206, 86, 1)',
            borderWidth: 2,
            data: lightValues
            });

        chart.data.datasets.push({
            label: 'Rainfall',
            backgroundColor: 'rgba(153, 102, 255, 0.2)',
            borderColor: 'rgba(153, 102, 255, 1)',
            borderWidth: 2,
            data: rainfallValues
            });
            
        chart.data.datasets.push({
            label: 'Nutrients',
            backgroundColor: 'rgba(255, 159, 64, 0.2)',
            borderColor: 'rgba(255, 159, 64, 1)',
            borderWidth: 2,
            data: nutrientsValues
            });
            
        chart.update();
    });
}, 5000);

</script>

<main>
<section class="sensor">
<div class="chart-container">
<h2>Irrigation Monitoring</h2>
<canvas id="Irrigation-chart"></canvas>
</div>
</section>
<section class="sensor">
<div class="chart-container">
<h2>Plant Growth and Health Monitoring</h2>
<canvas id="PGHM-chart"></canvas>
</div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js"></script>

<script>

var IrrigationCanvas = document.getElementById('Irrigation-chart').getContext('2d');
var PGHMCanvas = document.getElementById('PGHM-chart').getContext('2d');

var IrrigationChart = new Chart(IrrigationCanvas, {
    type: 'bar',
    data: {
        labels: [],
        datasets: [{
            label: 'Soil Moisture',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2,
            data: []
        },
        {
            label: 'Rainfall',
            backgroundColor: 'rgba(153, 102, 255, 0.2)',
            borderColor: 'rgba(153, 102, 255, 1)',
            borderWidth: 2,
            data: []
        }]
    },
    options: {
        scales: {
            y: {
                ticks: {
                    beginAtZero: true
                }
            }
        }
    }
});

var PGHMChart = new Chart(PGHMCanvas, {
    type: 'bar',
    data: {
        labels: [],
        datasets: [{
            label: 'Light',
            backgroundColor: 'rgba(255, 206, 86, 0.2)',
            borderColor: 'rgba(255, 206, 86, 1)',
            borderWidth: 2,
            data: []
        },
        {
        label: 'Temperature',
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        borderColor: 'rgba(255, 99, 132, 1)',
        borderWidth: 2,
        data: []
        },
        {
        label: 'Humidity',
        backgroundColor: 'rgba(54, 162, 235, 0.2)',
        borderColor: 'rgba(54, 162, 235, 1)',
        borderWidth: 2,
        data: []
        },
        {
        label: 'Nutrients',
        backgroundColor: 'rgba(255, 159, 64, 0.2)',
        borderColor: 'rgba(255, 159, 64, 1)',
        borderWidth: 2,
        data: []
        }]
    },
    options: {
        scales: {
            y: {
                ticks: {
                    beginAtZero: true
                }
            }
        }
    }
});

setInterval(function() {
    fetch('https://smartagrifunctionapp.azurewebsites.net/api/SensorData/?')
    .then(response => response.json())
    .then(data => {

        var latestData = data.map(function(item) {
            return {
                Id: item.id.slice(0,8),
                Temperature: item.Temperature,
                SoilMoisture: item.SoilMoisture,
                Rainfall: item.Rainfall,
                Humidity: item.Humidity,
                Light: item.Light,
                Nutrients: item.Nutrients,
            }
        });

        var labels = [];
    
        var temperatureValues = [];
        var soilmoistureValues = [];
        var rainfallValues = [];
        var humidityValues = [];
        var lightValues = [];
        var nutrientsValues = [];
    
    latestData.forEach(function(item) {
        labels.push(item.Id);
        temperatureValues.push(item.Temperature);
        soilmoistureValues.push(item.SoilMoisture);
        rainfallValues.push(item.Rainfall);
        humidityValues.push(item.Humidity);
        lightValues.push(item.Light);
        nutrientsValues.push(item.Nutrients);
        });

// update the chart data with latest values
    IrrigationChart.data.labels = labels;
    IrrigationChart.data.datasets[0].data = soilmoistureValues;
    IrrigationChart.data.datasets[1].data = rainfallValues;
    IrrigationChart.update();

    PGHMChart.data.labels = labels;
    PGHMChart.data.datasets[0].data = temperatureValues;
    PGHMChart.data.datasets[1].data = humidityValues;
    PGHMChart.data.datasets[2].data = lightValues;
    PGHMChart.data.datasets[3].data = nutrientsValues;
    PGHMChart.update();

})
    .catch(error => {
        console.log(error);
    });
}, 5000); // update chart data every 5 seconds
</script>
</section>
</main>


<!-- Import Bootstrap CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"/>

<style>
  /* Add border and padding to table cells */
  table {
    border-collapse: collapse;
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }
  th, td {
    padding: 10px;
    border: 1px solid #ddd;
  }
  /* Add background color to table header */
  th {
    background-color: #f2f2f2;
  }
</style>

<div class="container mt-7">
  <h1>Latest Sensor Data</h1>
  <table class="table">
    <thead>
      <tr>
        <th>id</th>
        <th>Temperature</th>
        <th>SoilMoisture</th>
        <th>Humidity</th>
        <th>Light</th>
        <th>Rainfall</th>
        <th>Nutrients</th>
      </tr>
    </thead>
    <tbody id="SensorData"></tbody>
  </table>
</div>

<script>
  // Get the tbody element
  var tbody = document.getElementById("SensorData");

  // Retrieve the latest sensor data and update the table every 5 seconds
  setInterval(function() {
    fetch('https://smartagrifunctionapp.azurewebsites.net/api/SensorData/?')
      .then(response => response.json())
      .then(data => {
        // Clear the tbody element
        tbody.innerHTML = '';

        // Add a row for each item in the data array
        data.forEach(function(item) {
          var row = document.createElement("tr");
          var id = document.createElement("td");
          var Temperature = document.createElement("td");
          var SoilMoisture = document.createElement("td");
          var Humidity = document.createElement("td");
          var Light = document.createElement("td");
          var Rainfall = document.createElement("td");
          var Nutrients = document.createElement("td");

          // Set the width of the first column
          id.style.width = "200px";
          id.style.fontSize = "smaller";

          // Set the text content of each cell
          id.innerText = item.id;
          Temperature.innerText = item.Temperature.toFixed(3);
          SoilMoisture.innerText = item.SoilMoisture.toFixed(3);
          Humidity.innerText = item.Humidity.toFixed(3);
          Light.innerText = item.Light.toFixed(3);
          Rainfall.innerText = item.Rainfall.toFixed(3);
          Nutrients.innerText = item.Nutrients.toFixed(3);

          // Append the cells to the row
          row.appendChild(id);
          row.appendChild(Temperature);
          row.appendChild(SoilMoisture);
          row.appendChild(Humidity);
          row.appendChild(Light);
          row.appendChild(Rainfall);
          row.appendChild(Nutrients);
          
          // Append the row to the body
          tbody.appendChild(row);
        });
      });
  }, 5000);
</script>

 <div class="footer">
    <br>
        <p>Copyright © Smart Agriculture Monitoring System</p>
    </div>
